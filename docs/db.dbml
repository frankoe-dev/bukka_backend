Project bukka {
  database_type: 'PostgreSQL'
  Note: '''
  # Bukka DB Schema
  **markdown content here**
  '''
}

// * AUTH/USERS

Table authentications {
  id uuid [pk, not null]
  email varchar [unique, not null]
  username varchar
  phone varchar
  password_hash varchar [not null]
  created_at timestamptz [default: `now()`]
  updated_at timestamptz
  is_suspended boolean [default: false]
  is_deleted boolean [default: false]
  is_verified boolean [default: false]
  is_email_verified boolean [default: false]
  deleted_at timestamptz
  verified_at timestamptz
  suspended_at timestamptz
  login_attempts int [default: 0]
  password_last_changed timestamptz
  lockout_duration int [default: 60] // minutes
  lockout_until timestamptz
  is_mfa_enabled boolean [default: false]
  Indexes {
    (email, username, created_at, updated_at)
  }
}


Table users {
  id int [pk, increment]  
  user_id uuid [ref: > authentications.id, not null, unique]
  first_name varchar
  last_name varchar
  image_url varchar
}

Table roles {
  id int [pk, increment]
  name varchar
}

Table user_roles {
  id int [pk, increment]
  user_id uuid [ref: > authentications.id, not null]
  role_id int [ref: > roles.id, not null]
  Indexes{
    (role_id) 
  }
}

// Email verification requests
Table email_verification_requests {
  id bigserial [pk, increment]
  user_id uuid [ref: > authentications.id, not null]
  email varchar [not null]
  token varchar [not null, unique]
  is_verified boolean [default: false]
  created_at timestamptz [default: `now()`]
  expires_at timestamptz [default: `now() + interval 15 minutes`]
  Indexes{
    (user_id, token, email, created_at)
  }
}

Table user_logins {
  id int [pk, increment]
  user_id uuid [ref: > authentications.id]
  login_at timestamptz [default: `now()`]
  ip_address inet
  user_agent varchar
  Indexes{
    (user_id, login_at) 
  }
}

Table sessions {
  id uuid [pk, not null]
  user_id uuid [ref: > authentications.id]
  refresh_token varchar [not null, unique]
  refresh_token_exp timestamptz [not null]
  created_at timestamptz [default: `now()`]
  updated_at timestamptz // Time when the session was last updated (e.g., token rotation)
  invalidated_at timestamptz // Time when the session was invalidated, if at all
  last_active_at timestamptz // Last time the user was active within the session
  blocked_at timestamptz // Time when the session was blocked, if at all
  user_agent text [not null]
  ip_address inet [not null]
  Indexes{
    (user_id, refresh_token_exp, updated_at) 
  }
}


Table password_reset_requests {
  id int [pk, increment]
  user_id uuid [ref: > authentications.id, not null] 
  email varchar [not null]
  token varchar [not null, unique]
  used boolean [default: false]
  created_at timestamptz [default: `now()`]
  expires_at timestamptz
  Indexes{
    (user_id, token) 
  }
}


Table account_recovery_requests {
  id int [pk, increment]
  user_id uuid [ref: > authentications.id, not null] 
  email varchar [not null]
  used boolean [default: false]
  recovery_token varchar [unique, not null]
  requested_at timestamptz [default: `now()`]
  expires_at timestamptz [not null]
  completed_at timestamptz
  Indexes{
    (user_id, recovery_token)
  }
}


Table two_factor_secrets {
  id int [pk, increment]
  user_id uuid [ref: > authentications.id, not null] //,unique]
  secret_key varchar [not null, note: 'Encrypted']
  is_active boolean [default: true]
}

Table two_factor_revocation {
  id int [pk, increment]
  user_id uuid [not null, ref: > authentications.id]
  revoked_at timestamptz
  revocation_reason varchar [null]
  revoked_by uuid [null, ref: > authentications.id]
}

Table two_factor_backup_codes {
  id int [pk, increment]
  user_id uuid [ref: > authentications.id, not null]
  code varchar [not null, note: 'Encrypted']
  used boolean [default: false]
}

Table change_identifier_requests {
    id int [pk, increment]
    user_id uuid [ref: > authentications.id]
    identifier varchar [not null]
    token varchar [not null, unique]
    type varchar [not null]
    used boolean [default: false]
    created_at timestamptz [default: `now()`]
    expires_at timestamptz
    Indexes{
        (user_id, identifier, token, expires_at) 
    }
}



// ! Start of unused

// Login failures  
Table login_failures {
  id int [pk, increment]
  user_id uuid [ref: > authentications.id]
  timestamp timestamptz
  user_agent varchar
  ip_address inet
  Indexes{
    (user_id, timestamp) 
  }
}

// Banned users
Table banned_users {
  id int [pk, increment] 
  user_id uuid [ref: > authentications.id]
  banned_at timestamptz
  reason varchar
  Indexes{
    (user_id) 
  }
}

Table security_questions {
  id int [pk, increment]
  user_id uuid [ref: > authentications.id]
  question varchar
  answer varchar
  expired_at timestamptz
}

Table social_providers {
  id int [pk, increment]
  name varchar [unique]
  api_key varchar
  oauth_settings json
}

Table social_provider_users {
  id int [pk, increment]
  provider_id int [ref: > social_providers.id]
  provider_user_id varchar
  user_id uuid [ref: > authentications.id] 
  access_token varchar
  refresh_token varchar
  Indexes{
    (provider_id, provider_user_id) 
  }
}


Table audit_logs {
  id int [pk, increment]
  user_id uuid [ref: > authentications.id] 
  action varchar
  created_at timestamptz [default: `now()`]
  updated_at timestamptz
  Indexes{
    (user_id, updated_at, created_at)
  }
}

Table user_preferences {
  user_id uuid [ref: > authentications.id]
  preferences json // or break into columns
}

// Notifications
Table notifications {
  id int [pk, increment] 
  user_id uuid [ref: > authentications.id]
  title varchar
  action varchar
  content varchar
  details json
  read_at timestamptz
  created_at timestamptz [default: `now()`]
  Indexes{
    (user_id, created_at, read_at) 
  }
}


// API keys
Table api_keys {
  id int [pk, increment]
  user_id uuid [ref: > authentications.id]
  key varchar [unique]
  permissions json
  created_at timestamptz [default: `now()`]
  updated_at timestamptz 
  last_used_at timestamptz
  is_active boolean
  is_deleted boolean
  Indexes{
    (user_id, key, updated_at, created_at)
  }
}

Table user_api_keys {
  user_id uuid [ref: > authentications.id]
  api_key_id int [ref: > api_keys.id]
  Indexes{
    (user_id, api_key_id)
  }
}