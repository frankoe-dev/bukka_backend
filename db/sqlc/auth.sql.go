// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: auth.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const blockUser = `-- name: BlockUser :exec
UPDATE authentications
SET is_suspended = true,
    suspended_at = NOW()
WHERE id = $1
`

func (q *Queries) BlockUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, blockUser, id)
	return err
}

const checkUsername = `-- name: CheckUsername :one
SELECT COUNT(*) FROM authentications WHERE LOWER(username) = LOWER($1)
`

func (q *Queries) CheckUsername(ctx context.Context, lower string) (int64, error) {
	row := q.db.QueryRow(ctx, checkUsername, lower)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO authentications (
    id, email, username, password_hash
    )
VALUES ($1, $2, $3, $4)
RETURNING id, email, phone, username, password_hash, created_at, updated_at, is_suspended, is_deleted, is_verified, is_email_verified, deleted_at, verified_at, suspended_at, login_attempts, password_last_changed, lockout_duration, lockout_until, is_mfa_enabled
`

type CreateUserParams struct {
	ID           uuid.UUID   `json:"id"`
	Email        string      `json:"email"`
	Username     pgtype.Text `json:"username"`
	PasswordHash string      `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Authentication, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.PasswordHash,
	)
	var i Authentication
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsSuspended,
		&i.IsDeleted,
		&i.IsVerified,
		&i.IsEmailVerified,
		&i.DeletedAt,
		&i.VerifiedAt,
		&i.SuspendedAt,
		&i.LoginAttempts,
		&i.PasswordLastChanged,
		&i.LockoutDuration,
		&i.LockoutUntil,
		&i.IsMfaEnabled,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM authentications WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserByID, id)
	return err
}

const getUidsFromUsername = `-- name: GetUidsFromUsername :many
SELECT id FROM authentications WHERE LOWER(username) = ANY($1::string[])
`

func (q *Queries) GetUidsFromUsername(ctx context.Context, dollar_1 []string) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getUidsFromUsername, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAndRoleByIdentifier = `-- name: GetUserAndRoleByIdentifier :one
SELECT authentications.id, authentications.email, authentications.phone, authentications.username, authentications.password_hash, authentications.created_at, authentications.updated_at, authentications.is_suspended, authentications.is_deleted, authentications.is_verified, authentications.is_email_verified, authentications.deleted_at, authentications.verified_at, authentications.suspended_at, authentications.login_attempts, authentications.password_last_changed, authentications.lockout_duration, authentications.lockout_until, authentications.is_mfa_enabled, user_roles.role_id, users.id, users.user_id, users.first_name, users.last_name, users.image_url
FROM authentications
JOIN user_roles ON authentications.id = user_roles.user_id
LEFT JOIN users ON authentications.id = users.user_id
WHERE authentications.username = $1 OR authentications.phone = $1 OR authentications.email = $1
`

type GetUserAndRoleByIdentifierRow struct {
	ID                  uuid.UUID          `json:"id"`
	Email               string             `json:"email"`
	Phone               pgtype.Text        `json:"phone"`
	Username            pgtype.Text        `json:"username"`
	PasswordHash        string             `json:"password_hash"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
	IsSuspended         pgtype.Bool        `json:"is_suspended"`
	IsDeleted           pgtype.Bool        `json:"is_deleted"`
	IsVerified          pgtype.Bool        `json:"is_verified"`
	IsEmailVerified     pgtype.Bool        `json:"is_email_verified"`
	DeletedAt           pgtype.Timestamptz `json:"deleted_at"`
	VerifiedAt          pgtype.Timestamptz `json:"verified_at"`
	SuspendedAt         pgtype.Timestamptz `json:"suspended_at"`
	LoginAttempts       pgtype.Int4        `json:"login_attempts"`
	PasswordLastChanged pgtype.Timestamptz `json:"password_last_changed"`
	LockoutDuration     pgtype.Int4        `json:"lockout_duration"`
	LockoutUntil        pgtype.Timestamptz `json:"lockout_until"`
	IsMfaEnabled        pgtype.Bool        `json:"is_mfa_enabled"`
	RoleID              int32              `json:"role_id"`
	ID_2                pgtype.Int4        `json:"id_2"`
	UserID              pgtype.UUID        `json:"user_id"`
	FirstName           pgtype.Text        `json:"first_name"`
	LastName            pgtype.Text        `json:"last_name"`
	ImageUrl            pgtype.Text        `json:"image_url"`
}

func (q *Queries) GetUserAndRoleByIdentifier(ctx context.Context, username pgtype.Text) (GetUserAndRoleByIdentifierRow, error) {
	row := q.db.QueryRow(ctx, getUserAndRoleByIdentifier, username)
	var i GetUserAndRoleByIdentifierRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsSuspended,
		&i.IsDeleted,
		&i.IsVerified,
		&i.IsEmailVerified,
		&i.DeletedAt,
		&i.VerifiedAt,
		&i.SuspendedAt,
		&i.LoginAttempts,
		&i.PasswordLastChanged,
		&i.LockoutDuration,
		&i.LockoutUntil,
		&i.IsMfaEnabled,
		&i.RoleID,
		&i.ID_2,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.ImageUrl,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, phone, username, password_hash, created_at, updated_at, is_suspended, is_deleted, is_verified, is_email_verified, deleted_at, verified_at, suspended_at, login_attempts, password_last_changed, lockout_duration, lockout_until, is_mfa_enabled FROM authentications WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (Authentication, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i Authentication
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsSuspended,
		&i.IsDeleted,
		&i.IsVerified,
		&i.IsEmailVerified,
		&i.DeletedAt,
		&i.VerifiedAt,
		&i.SuspendedAt,
		&i.LoginAttempts,
		&i.PasswordLastChanged,
		&i.LockoutDuration,
		&i.LockoutUntil,
		&i.IsMfaEnabled,
	)
	return i, err
}

const getUserByIdentifier = `-- name: GetUserByIdentifier :one
SELECT id, email, phone, username, password_hash, created_at, updated_at, is_suspended, is_deleted, is_verified, is_email_verified, deleted_at, verified_at, suspended_at, login_attempts, password_last_changed, lockout_duration, lockout_until, is_mfa_enabled FROM authentications
WHERE email = $1 OR username = $1 OR phone = $1
LIMIT 1
`

func (q *Queries) GetUserByIdentifier(ctx context.Context, email string) (Authentication, error) {
	row := q.db.QueryRow(ctx, getUserByIdentifier, email)
	var i Authentication
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsSuspended,
		&i.IsDeleted,
		&i.IsVerified,
		&i.IsEmailVerified,
		&i.DeletedAt,
		&i.VerifiedAt,
		&i.SuspendedAt,
		&i.LoginAttempts,
		&i.PasswordLastChanged,
		&i.LockoutDuration,
		&i.LockoutUntil,
		&i.IsMfaEnabled,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id FROM authentications WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username pgtype.Text) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserIDsFromUsernames = `-- name: GetUserIDsFromUsernames :many
SELECT id FROM authentications WHERE username = ANY($1)
`

func (q *Queries) GetUserIDsFromUsernames(ctx context.Context, username pgtype.Text) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getUserIDsFromUsernames, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE authentications
SET
    username = COALESCE($1,username),
    email = COALESCE($2,email),
    phone = COALESCE($3,phone),
    password_hash = COALESCE($4,password_hash),
    is_email_verified = COALESCE($5,is_email_verified),
    is_suspended = COALESCE($6,is_suspended),
    is_deleted = COALESCE($7,is_deleted),
    updated_at = COALESCE($8,updated_at),
    deleted_at = COALESCE($9,deleted_at),
    verified_at = COALESCE($10,verified_at),
    suspended_at = COALESCE($11,suspended_at),
    login_attempts = COALESCE($12,login_attempts),
    lockout_duration = COALESCE($13,lockout_duration),
    lockout_until = COALESCE($14,lockout_until),
    password_last_changed = COALESCE($15,password_last_changed),
    is_verified = COALESCE($16,is_verified),
    is_mfa_enabled = COALESCE($17,is_mfa_enabled)
WHERE
    id = $18
RETURNING id, email, phone, username, password_hash, created_at, updated_at, is_suspended, is_deleted, is_verified, is_email_verified, deleted_at, verified_at, suspended_at, login_attempts, password_last_changed, lockout_duration, lockout_until, is_mfa_enabled
`

type UpdateUserParams struct {
	Username            pgtype.Text        `json:"username"`
	Email               pgtype.Text        `json:"email"`
	Phone               pgtype.Text        `json:"phone"`
	PasswordHash        pgtype.Text        `json:"password_hash"`
	IsEmailVerified     pgtype.Bool        `json:"is_email_verified"`
	IsSuspended         pgtype.Bool        `json:"is_suspended"`
	IsDeleted           pgtype.Bool        `json:"is_deleted"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
	DeletedAt           pgtype.Timestamptz `json:"deleted_at"`
	VerifiedAt          pgtype.Timestamptz `json:"verified_at"`
	SuspendedAt         pgtype.Timestamptz `json:"suspended_at"`
	LoginAttempts       pgtype.Int4        `json:"login_attempts"`
	LockoutDuration     pgtype.Int4        `json:"lockout_duration"`
	LockoutUntil        pgtype.Timestamptz `json:"lockout_until"`
	PasswordLastChanged pgtype.Timestamptz `json:"password_last_changed"`
	IsVerified          pgtype.Bool        `json:"is_verified"`
	IsMfaEnabled        pgtype.Bool        `json:"is_mfa_enabled"`
	ID                  uuid.UUID          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Authentication, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.Phone,
		arg.PasswordHash,
		arg.IsEmailVerified,
		arg.IsSuspended,
		arg.IsDeleted,
		arg.UpdatedAt,
		arg.DeletedAt,
		arg.VerifiedAt,
		arg.SuspendedAt,
		arg.LoginAttempts,
		arg.LockoutDuration,
		arg.LockoutUntil,
		arg.PasswordLastChanged,
		arg.IsVerified,
		arg.IsMfaEnabled,
		arg.ID,
	)
	var i Authentication
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsSuspended,
		&i.IsDeleted,
		&i.IsVerified,
		&i.IsEmailVerified,
		&i.DeletedAt,
		&i.VerifiedAt,
		&i.SuspendedAt,
		&i.LoginAttempts,
		&i.PasswordLastChanged,
		&i.LockoutDuration,
		&i.LockoutUntil,
		&i.IsMfaEnabled,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE authentications
SET password_hash = $2, password_last_changed = now()
WHERE id = $1 OR email = $1
`

type UpdateUserPasswordParams struct {
	ID           uuid.UUID `json:"id"`
	PasswordHash string    `json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}
