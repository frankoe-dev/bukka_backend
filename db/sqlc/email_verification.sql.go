// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: email_verification.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const cleanupVerifiedAndExpiredRequests = `-- name: CleanupVerifiedAndExpiredRequests :exec
DELETE FROM email_verification_requests WHERE is_verified = true OR expires_at < now()
`

func (q *Queries) CleanupVerifiedAndExpiredRequests(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanupVerifiedAndExpiredRequests)
	return err
}

const createEmailVerificationRequest = `-- name: CreateEmailVerificationRequest :exec
INSERT INTO email_verification_requests (user_id, email, token, expires_at)
VALUES ($1, $2, $3, $4)
`

type CreateEmailVerificationRequestParams struct {
	UserID    uuid.UUID `json:"user_id"`
	Email     string    `json:"email"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateEmailVerificationRequest(ctx context.Context, arg CreateEmailVerificationRequestParams) error {
	_, err := q.db.Exec(ctx, createEmailVerificationRequest,
		arg.UserID,
		arg.Email,
		arg.Token,
		arg.ExpiresAt,
	)
	return err
}

const getEmailVerificationRequestByToken = `-- name: GetEmailVerificationRequestByToken :one
SELECT id, user_id, email, token, is_verified, created_at, expires_at FROM email_verification_requests WHERE token = $1 LIMIT 1
`

func (q *Queries) GetEmailVerificationRequestByToken(ctx context.Context, token string) (EmailVerificationRequest, error) {
	row := q.db.QueryRow(ctx, getEmailVerificationRequestByToken, token)
	var i EmailVerificationRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Token,
		&i.IsVerified,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const updateEmailVerificationRequest = `-- name: UpdateEmailVerificationRequest :one
UPDATE email_verification_requests SET is_verified = $1 WHERE token = $2
RETURNING id, user_id, email, token, is_verified, created_at, expires_at
`

type UpdateEmailVerificationRequestParams struct {
	IsVerified pgtype.Bool `json:"is_verified"`
	Token      string      `json:"token"`
}

func (q *Queries) UpdateEmailVerificationRequest(ctx context.Context, arg UpdateEmailVerificationRequestParams) (EmailVerificationRequest, error) {
	row := q.db.QueryRow(ctx, updateEmailVerificationRequest, arg.IsVerified, arg.Token)
	var i EmailVerificationRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.Token,
		&i.IsVerified,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
